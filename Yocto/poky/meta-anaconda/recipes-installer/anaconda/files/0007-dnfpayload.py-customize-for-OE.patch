From f1e88262ef77bcd9d0ec50180ecd1a9c0f646049 Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Tue, 25 Jun 2019 10:34:14 +0800
Subject: [PATCH] dnfpayload.py: customize for OE

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>

Update context for anaconda 32.

the storage and data are not propagated to the payload again, so remove
from setup().

Signed-off-by: Kai Kang <kai.kang@windriver.com>

Rebase for anaconda 34 on 20210727.
* rebase code
* remove debug code
* remove patch for function language_groups() which has been remove from upstream

Signed-off-by: Kai Kang <kai.kang@windriver.com>
---
 .../modules/payloads/payload/dnf/dnf_manager.py    |  39 ++-
 pyanaconda/modules/payloads/payload/dnf/utils.py   |  15 --
 pyanaconda/payload/dnf/payload.py                  | 265 +++++++++++++++++++--
 pyanaconda/payload/dnf/transaction_progress.py     |   6 +-
 4 files changed, 282 insertions(+), 43 deletions(-)

diff --git a/pyanaconda/modules/payloads/payload/dnf/dnf_manager.py b/pyanaconda/modules/payloads/payload/dnf/dnf_manager.py
index bd7d3e42f..0c27a1a69 100644
--- a/pyanaconda/modules/payloads/payload/dnf/dnf_manager.py
+++ b/pyanaconda/modules/payloads/payload/dnf/dnf_manager.py
@@ -17,6 +17,8 @@
 # License and may only be used or replicated with the express permission of
 # Red Hat, Inc.
 #
+import os
+
 import shutil
 import dnf
 import dnf.exceptions
@@ -27,7 +29,7 @@ from pyanaconda.anaconda_loggers import get_module_logger
 from pyanaconda.core.configuration.anaconda import conf
 from pyanaconda.core.constants import DNF_DEFAULT_TIMEOUT, DNF_DEFAULT_RETRIES
 from pyanaconda.core.payload import ProxyString, ProxyStringError
-from pyanaconda.core.util import get_os_release_value
+from pyanaconda.core.util import get_os_release_value, execWithRedirect
 from pyanaconda.modules.common.structures.payload import PackagesConfigurationData
 from pyanaconda.modules.payloads.constants import DNF_REPO_DIRS
 from pyanaconda.modules.payloads.payload.dnf.utils import get_product_release_version
@@ -62,6 +64,7 @@ class DNFManager(object):
         """The DNF base."""
         if self.__base is None:
             self.__base = self._create_base()
+            self._oe_configure(self.__base.conf)
 
         return self.__base
 
@@ -75,12 +78,13 @@ class DNFManager(object):
         base.conf.releasever = get_product_release_version()
         base.conf.installroot = conf.target.system_root
         base.conf.prepend_installroot('persistdir')
+
         # Load variables substitutions configuration (rhbz#1920735)
         base.conf.substitutions.update_from_etc("/")
 
         # Set the platform id based on the /os/release present
         # in the installation environment.
-        platform_id = get_os_release_value("PLATFORM_ID")
+        platform_id = get_os_release_value("VERSION_ID")
 
         if platform_id is not None:
             base.conf.module_platform_id = platform_id
@@ -269,3 +273,34 @@ class DNFManager(object):
         return exception.error_group_specs \
             or exception.error_pkg_specs \
             or exception.module_depsolv_errors
+
+    def _oe_configure(self, dnf_conf):
+        # Refers oe-core's recipes of dnf and rpm
+        os.environ['RPM_NO_CHROOT_FOR_SCRIPTS'] = "1"
+
+        # Refers oe-core's meta/lib/oe/package_manager.py
+        # def _prepare_pkg_transaction(self) in class RpmPM(PackageManager)
+        target_rootfs = conf.target.system_root
+        os.environ['D'] = target_rootfs
+        os.environ['OFFLINE_ROOT'] = target_rootfs
+        os.environ['IPKG_OFFLINE_ROOT'] = target_rootfs
+        os.environ['OPKG_OFFLINE_ROOT'] = target_rootfs
+
+        # Refer oe-core's meta/lib/oe/package_manager.py
+        # def _configure_dnf(self) in class RpmPM(PackageManager)
+        # directly read its result from installer system
+        dnf_conf.substitutions['arch'] = open("/etc/dnf/vars/arch", "r").readline()
+
+        dnf_conf.errorlevel = dnf.const.VERBOSE_LEVEL
+        dnf_conf.debuglevel = dnf.const.VERBOSE_LEVEL
+
+
+    def oe_configure_post(self):
+        # Refers oe-core's meta/lib/oe/package_manager.py
+        # def _configure_rpm(self) and def _configure_dnf(self)
+        # in class RpmPM(PackageManager)
+        # directly copy its result from installer system
+        target_sysconf = "%s/etc" % conf.target.system_root
+        execWithRedirect("cp", ["-fr", "/etc/rpmrc", target_sysconf])
+        execWithRedirect("cp", ["-rf", "/etc/dnf", target_sysconf])
+        execWithRedirect("cp", ["-rf", "/etc/rpm", target_sysconf])
diff --git a/pyanaconda/modules/payloads/payload/dnf/utils.py b/pyanaconda/modules/payloads/payload/dnf/utils.py
index 341ca3d6e..56556a4bf 100644
--- a/pyanaconda/modules/payloads/payload/dnf/utils.py
+++ b/pyanaconda/modules/payloads/payload/dnf/utils.py
@@ -108,23 +108,8 @@ def get_installation_specs(data: PackagesConfigurationData, default_environment=
     exclude_list = []
 
     # Handle the environment.
-    if data.default_environment_enabled and default_environment:
-        env = default_environment
-        log.info("selecting default environment: %s", env)
-        include_list.append("@{}".format(env))
-    elif data.environment:
-        env = data.environment
-        log.info("selected environment: %s", env)
-        include_list.append("@{}".format(env))
 
     # Handle the core group.
-    if not data.core_group_enabled:
-        log.info("skipping core group due to %%packages "
-                 "--nocore; system may not be complete")
-        exclude_list.append("@core")
-    else:
-        log.info("selected group: core")
-        include_list.append("@core")
 
     # Handle groups.
     for group_name in data.excluded_groups:
diff --git a/pyanaconda/payload/dnf/payload.py b/pyanaconda/payload/dnf/payload.py
index 87d0fe031..642b753a0 100644
--- a/pyanaconda/payload/dnf/payload.py
+++ b/pyanaconda/payload/dnf/payload.py
@@ -30,11 +30,14 @@ import dnf.module.module_base
 import dnf.repo
 import dnf.subject
 import libdnf.conf
+import inspect
+import collections
 
 from glob import glob
 
 from pyanaconda.modules.common.structures.payload import RepoConfigurationData, \
     PackagesConfigurationData
+from pyanaconda.modules.common.structures.requirement import Requirement
 from pyanaconda.modules.payloads.payload.dnf.initialization import configure_dnf_logging
 from pyanaconda.modules.payloads.payload.dnf.installation import ImportRPMKeysTask, \
     SetRPMMacrosTask
@@ -127,6 +130,16 @@ class DNFPayload(Payload):
 
         # Additional packages required by installer based on used features
         self._requirements = []
+        # base packages
+        for pkg in ('base-files', 'base-passwd', 'shadow'):
+            self._requirements.append(Requirement.for_package(pkg, reason='base packages'))
+        # Support grub-mkconfig
+        for pkg in ('sed', 'coreutils'):
+            self._requirements.append(Requirement.for_package(pkg, reason='support grub-mkconfig'))
+
+        # OE specific
+        self.image = {}
+        self.tasks = {}
 
     @property
     def _base(self):
@@ -226,12 +239,19 @@ class DNFPayload(Payload):
     def setup(self):
         self.verbose_errors = []
 
+        # OE specific
+        self.image, self.tasks = self._read_buildstamp()
+
     def unsetup(self):
         self._configure()
         self._repoMD_list = []
         self._install_tree_metadata = None
         tear_down_sources(self.proxy)
 
+        # OE specific
+        self.image = {}
+        self.tasks = {}
+
     @property
     def needs_network(self):
         """Test base and additional repositories if they require network."""
@@ -333,6 +353,17 @@ class DNFPayload(Payload):
             data, default_environment
         )
 
+        env = None
+        if data.environment:
+            env = data.environment
+        elif default_environment:
+            env = default_environment
+        log.info("selected environment: %s", env)
+
+        for pkg_name in self._apply_yocto_environment(env):
+            log.info("selected yocto package: '%s'", pkg_name)
+            include_list.append(pkg_name)
+
         # Add the kernel package.
         kernel_package = get_kernel_package(self._base, exclude_list)
 
@@ -457,7 +488,8 @@ class DNFPayload(Payload):
 
     @property
     def environments(self):
-        return self._dnf_manager.environments
+        log.info("%s %s: %s" % (self.__class__.__name__, inspect.stack()[0][3], self.tasks.keys()))
+        return sorted(self.tasks.keys())
 
     @property
     def environment_addons(self):
@@ -469,8 +501,8 @@ class DNFPayload(Payload):
 
     @property
     def groups(self):
-        groups = self._base.comps.groups_iter()
-        return [g.id for g in groups]
+        log.info("%s %s: %s" % (self.__class__.__name__, inspect.stack()[0][3], self.tasks.keys()))
+        return []
 
     ###
     # METHODS FOR WORKING WITH REPOSITORIES
@@ -758,32 +790,28 @@ class DNFPayload(Payload):
             repo.enabled = True
 
     def environment_description(self, environment_id):
-        env = self._base.comps.environment_by_pattern(environment_id)
+        log.info("%s %s, %s" % (self.__class__.__name__, inspect.stack()[0][3], environment_id))
 
-        if env is None:
+        if environment_id not in self.tasks:
             raise NoSuchGroup(environment_id)
 
-        return (env.ui_name, env.ui_description)
+        if environment_id in self.tasks:
+            log.info("environmentDescription %s" % self.tasks)
+            (name, description, group) = self.tasks[environment_id]
+
+            return (name, description)
+        return (environment_id, environment_id)
 
     def environment_id(self, environment):
         """Return environment id for the environment specified by id or name."""
-        # the enviroment must be string or else DNF >=3 throws an assert error
-        if not isinstance(environment, str):
-            log.warning("environment_id() called with non-string "
-                        "argument: %s", environment)
-
-        env = self._base.comps.environment_by_pattern(environment)
-
-        if env is None:
-            raise NoSuchGroup(environment)
-
-        return env.id
+        log.info("%s %s, environment %s" % (self.__class__.__name__, inspect.stack()[0][3], environment))
+        # TODO
+        return environment
 
     def environment_has_option(self, environment_id, grpid):
-        env = self._base.comps.environment_by_pattern(environment_id)
-        if env is None:
-            raise NoSuchGroup(environment_id)
-        return grpid in (id_.name for id_ in env.option_ids)
+        log.info("%s %s, %s, %s" % (self.__class__.__name__, inspect.stack()[0][3], environment_id, grpid))
+        # TODO
+        return True
 
     def environment_option_is_default(self, environment_id, grpid):
         env = self._base.comps.environment_by_pattern(environment_id)
@@ -796,10 +824,9 @@ class DNFPayload(Payload):
 
     def group_description(self, grpid):
         """Return name/description tuple for the group specified by id."""
-        grp = self._base.comps.group_by_pattern(grpid)
-        if grp is None:
-            raise NoSuchGroup(grpid)
-        return (grp.ui_name, grp.ui_description or "")
+        log.info("%s %s, %s" % (self.__class__.__name__, inspect.stack()[0][3], grpid))
+        (name, description, group) = self.tasks[grpid]
+        return (name, description)
 
     def group_id(self, group_name):
         """Translate group name to group ID.
@@ -880,6 +907,8 @@ class DNFPayload(Payload):
 
         log.info('Downloading packages finished.')
 
+        failed_scriptlets_pkgnames = collections.OrderedDict()
+
         pre_msg = (N_("Preparing transaction from installation source"))
         progress_message(pre_msg)
 
@@ -911,12 +940,19 @@ class DNFPayload(Payload):
             elif token == 'quit':
                 msg = ("Payload error - DNF installation has ended up abruptly: %s" % msg)
                 raise PayloadError(msg)
+            elif token == 'warn':
+                if msg.startswith("Error in POSTIN scriptlet in rpm package"):
+                    failed_scriptlets_pkgnames[msg.split()[-1]] = True
             elif token == 'error':
                 raise PayloadInstallError("DNF error: %s" % msg)
 
             (token, msg) = queue_instance.get()
 
         process.join()
+
+        for pkg in failed_scriptlets_pkgnames.keys():
+            self._save_rpmpostinst(pkg)
+
         # Don't close the mother base here, because we still need it.
         if os.path.exists(self._download_location):
             log.info("Cleaning up downloaded packages: "
@@ -1540,6 +1576,185 @@ class DNFPayload(Payload):
         )
         task.run()
 
+        self._dnf_manager.oe_configure_post()
+
+        # For the generation of anaconda-ks.cfg
+        pkg_data = self.get_packages_data()
+        for pkg in self._list_installed():
+            if pkg not in pkg_data.packages:
+                pkg_data.packages.append(pkg)
+        self.set_packages_data(pkg_data)
+
+        util.execWithRedirect("depmod",
+                              ["-a"],
+                              root=conf.target.system_root)
+
     @property
     def kernel_version_list(self):
         return get_kernel_version_list()
+
+    def _read_buildstamp(self):
+        image = {}
+        tasks = {}
+
+        config = configparser.ConfigParser()
+        config.read(["/tmp/product/.buildstamp", "/.buildstamp", os.environ.get("PRODBUILDPATH", "")])
+
+        image_list = config.get("Rootfs", "LIST", fallback='').split()
+        for image_name in image_list:
+            _id_ = image_name.split('-')[0]
+            image_summary = config.get(image_name, "SUMMARY")
+            image_description = config.get(image_name, "DESCRIPTION")
+            package_install = config.get(image_name, "PACKAGE_INSTALL")
+            package_install_attemptonly = config.get(image_name,
+                                                         "PACKAGE_INSTALL_ATTEMPTONLY")
+            image_linguas = config.get(image_name, "IMAGE_LINGUAS")
+            image[image_name] = (image_summary,
+                                 image_description,
+                                 package_install,
+                                 package_install_attemptonly,
+                                 image_linguas)
+
+            short_image = image_name.replace("%s-image-" % _id_, "")
+
+            taskid = short_image
+            name = image_name
+            description = "%s" % image_summary
+            group = ""
+            tasks[taskid] = (name, description, group)
+
+            taskid = "%s-dev" % short_image
+            name = "%s dev-pkgs staticdev-pkgs" % image_name
+            description = "%s with development files" % image_summary
+            group = "dev-pkgs staticdev-pkgs"
+            tasks[taskid] = (name, description, group)
+
+            taskid = "%s-dbg" % short_image
+            name = "%s dbg-pkgs" % image_name
+            description = "%s with debug symbols" % image_summary
+            group = "dbg-pkgs"
+            tasks[taskid] = (name, description, group)
+
+            taskid = "%s-dev-dbg" % short_image
+            name = "%s dev-pkgs staticdev-pkgs dbg-pkgs" % image_name
+            description = "%s with development files and debug symbols" % image_summary
+            group = "dev-pkgs staticdev-pkgs dbg-pkgs"
+            tasks[taskid] = (name, description, group)
+
+        return image, tasks
+
+    def _apply_yocto_environment(self, env):
+        if not env:
+            return []
+
+        (image_name, description) = self.environment_description(env)
+        log.info("image_name %s, des %s" % (image_name, description))
+        image_id = image_name.split()[0]
+        (image_summary, image_description, package_install,
+            package_install_attemptonly, image_linguas) = self.image[image_id]
+        log.info("package_install %s, attempt %s, linguas %s" %
+                 (package_install, package_install_attemptonly, image_linguas))
+
+        # Language locale
+        self._select_yocto_linguas(image_linguas)
+
+        # -dbg/-doc/-dev
+        for group in self.tasks[env][2].split():
+            self._select_yocto_group(group)
+
+        # Installing packages
+        return package_install.split()
+
+    def _select_yocto_group(self, group_id):
+        log.info("_select_yocto_group %s" % group_id)
+        if not group_id:
+            return []
+
+        glob = self._yocto_complementary_glob(group_id)
+
+        # get all available languages in repos
+        available_packs = self._base.sack.query().available().filter(
+                            name__glob="*-%s" % glob)
+        allpkgnames = [p.name for p in available_packs]
+        log.info("allpkgnames %d" % len(allpkgnames))
+        for pkgname in allpkgnames:
+            self._try_install_package(pkgname)
+
+    def _select_yocto_linguas(self, image_linguas):
+        lc_globs = []
+        for ling in image_linguas.split():
+            if ling not in lc_globs:
+                lc_globs.append(ling)
+
+            baselang = ling.split('-')[0]
+            if ling != baselang and baselang not in lc_globs:
+                lc_globs.append(baselang)
+
+        log.info("lc_globs: %s" % lc_globs)
+        for lc_glob in lc_globs:
+            self._select_yocto_group("locale-%s" % lc_glob)
+
+    def _try_install_package(self, pkg_name):
+        try:
+            return self._base.install(pkg_name, strict=False)
+        except dnf.exceptions.MarkingError:
+            msg = "Payload error - No such package: %s" % pkg_name
+            raise PayloadError(msg)
+
+    # Refer upstream oe-core meta/lib/oe/package_manager.py
+    def _save_rpmpostinst(self, pkg):
+        def _script_num_prefix(path):
+            files = os.listdir(path)
+            numbers = set()
+            numbers.add(99)
+            for f in files:
+                numbers.add(int(f.split("-")[0]))
+            return max(numbers) + 1
+
+        log.info("Saving postinstall script of %s" % (pkg))
+
+        target_rootfs = conf.target.system_root
+        args = ["-q", "--root=%s" % target_rootfs, "--queryformat", "%{postin}", pkg]
+
+        output = util.execWithCapture('rpm', args, log_output=False)
+        log.info(output)
+
+        target_path = "%s/etc/rpm-postinsts" % target_rootfs
+        util.execWithRedirect("mkdir", ["-p", target_path])
+        num = _script_num_prefix(target_path)
+        saved_script_name = os.path.join(target_path, "%d-%s" % (num, pkg))
+        open(saved_script_name, 'w').write(output)
+        os.chmod(saved_script_name, 0o755)
+
+    def _list_installed(self):
+        output = util.execWithCapture(
+                      'dnf',
+                      [
+                        'repoquery',
+                        '--installed',
+                        '--installroot='+conf.target.system_root,
+                        '--queryformat=Package:%{name}'
+                      ],
+                      log_output=False
+                 )
+        output = output.rstrip()
+        lines = output.splitlines()
+        installed = []
+        for line in lines:
+            if not line.startswith("Package:"):
+                continue
+            installed.append(line.replace("Package:", ""))
+        return installed
+
+    def _yocto_complementary_glob(self, group):
+        complementary_glob = {}
+        complementary_glob['dev-pkgs'] = 'dev'
+        complementary_glob['staticdev-pkgs'] = 'staticdev'
+        complementary_glob['doc-pkgs'] = 'doc'
+        complementary_glob['dbg-pkgs'] = 'dbg'
+        complementary_glob['ptest-pkgs'] = 'ptest'
+
+        if group in complementary_glob:
+            return complementary_glob[group]
+
+        return group
diff --git a/pyanaconda/payload/dnf/transaction_progress.py b/pyanaconda/payload/dnf/transaction_progress.py
index 07c88ea9a..df860224c 100644
--- a/pyanaconda/payload/dnf/transaction_progress.py
+++ b/pyanaconda/payload/dnf/transaction_progress.py
@@ -84,4 +84,8 @@ class TransactionProgress(dnf.callback.TransactionProgress):
         """Report an error that occurred during the transaction. Message is a
         string which describes the error.
         """
-        self._queue.put(('error', message))
+        token = "error"
+        if message.startswith("Error in POSTIN scriptlet in rpm package"):
+            token = "warn"
+        self._queue.put((token, message))
+        log.info("error: %s" % message)
-- 
2.7.4
