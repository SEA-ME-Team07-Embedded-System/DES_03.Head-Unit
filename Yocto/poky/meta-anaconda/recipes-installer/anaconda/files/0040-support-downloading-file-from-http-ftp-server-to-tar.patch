From 4c891449e324d3a78ddf7722fd7805bae2e1cbfb Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Sat, 29 Jun 2019 15:06:40 +0800
Subject: [PATCH] support downloading file from http/ftp server to target image

Add key in kickstart to support downloading file from http/ftp server to target image,
'download --dest=[file://dir/filename|/dir/filename] --src=[http url| ftp url]'

Here is the example in kickstart file:
---start---
download --dest=/etc/rpm/keys/0x100001 --src=http://128.224.162.159/testkey
download --dest=file://etc/rpm/keys/0x100002 --src=http://128.224.162.159/testkey2
---end---

The file be download to target image (/mnt/image/****). For host image,
we could make use of "%pre" section with invoking shell to do that)

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>

Rebase for anaconda 34.

Signed-off-by: Kai Kang <kai.kang@windriver.com>
---
 pyanaconda/installation.py |   6 +++
 pyanaconda/kickstart.py    | 100 +++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 106 insertions(+)

diff --git a/pyanaconda/installation.py b/pyanaconda/installation.py
index 0548b539b..2cb222ab6 100644
--- a/pyanaconda/installation.py
+++ b/pyanaconda/installation.py
@@ -144,6 +144,12 @@ def _prepare_configuration(payload, ksdata):
     # Anaconda addon configuration
     addon_config = TaskQueue("Anaconda addon configuration", N_("Configuring addons"))
 
+    addon_config.append(Task(
+        "Configure download",
+        ksdata.download.execute,
+        (ksdata,)
+    ))
+
     boss_proxy = BOSS.get_proxy()
     for service_name, object_path in boss_proxy.CollectInstallSystemTasks():
         task_proxy = DBus.get_proxy(service_name, object_path)
diff --git a/pyanaconda/kickstart.py b/pyanaconda/kickstart.py
index 5ba8ef7eb..07cc3a886 100644
--- a/pyanaconda/kickstart.py
+++ b/pyanaconda/kickstart.py
@@ -26,6 +26,7 @@ import sys
 import tempfile
 import time
 import warnings
+import requests
 
 from contextlib import contextmanager
 
@@ -47,6 +48,8 @@ from pykickstart.constants import KS_SCRIPT_POST, KS_SCRIPT_PRE, KS_SCRIPT_TRACE
 from pykickstart.errors import KickstartError, KickstartParseWarning, KickstartDeprecationWarning, KickstartAuthError
 from pykickstart.ko import KickstartObject
 from pykickstart.parser import KickstartParser
+from pykickstart.base import KickstartCommand, BaseData
+from pykickstart.options import KSOptionParser
 from pykickstart.parser import Script as KSScript
 from pykickstart.sections import NullSection, PostScriptSection, PreScriptSection, \
     PreInstallScriptSection, OnErrorScriptSection, TracebackScriptSection, Section
@@ -308,6 +311,101 @@ class AnacondaSection(Section):
         Section.finalize(self)
 
 
+class DownloadData(BaseData):
+    removedKeywords = BaseData.removedKeywords
+    removedAttrs = BaseData.removedAttrs
+
+    def __init__(self, *args, **kwargs):
+        BaseData.__init__(self, *args, **kwargs)
+        self.dest = kwargs.get("dest", None)
+        self.src = kwargs.get("src", None)
+
+    def __eq__(self, y):
+        return self.dest == y.dest
+
+    def _getArgsAsStr(self):
+        retval = "--dest=%s --src=%s" % (self.dest, self.src)
+        return retval
+
+    def __str__(self):
+        retval = BaseData.__str__(self)
+        retval += "download %s\n" % self._getArgsAsStr()
+        return retval
+
+class Download(KickstartCommand):
+    removedKeywords = KickstartCommand.removedKeywords
+    removedAttrs = KickstartCommand.removedAttrs
+
+    def __init__(self, writePriority=0, *args, **kwargs):
+        KickstartCommand.__init__(self, writePriority, *args, **kwargs)
+        self.op = self._getParser()
+        self.downloadList = kwargs.get("downloadList", [])
+
+    def __str__(self):
+        retval = "# Download file from http/ftp server to target image\n"
+        retval += "# download --dest=[file://dir/filename|/dir/filename] --src=[http url| ftp url]\n"
+        for d in self.downloadList:
+            retval += d.__str__()
+        retval += "\n"
+        return retval
+
+    def _getParser(self):
+        op = KSOptionParser(prog="download", version=VERSION, description="")
+        op.add_argument("--dest", dest="dest", version=VERSION, required=True, help="")
+        op.add_argument("--src", dest="src", version=VERSION, required=True, help="")
+
+        return op
+
+    def parse(self, args):
+        ns = self.op.parse_args(args=args, lineno=self.lineno)
+        dd = self.dataClass()
+        self.set_to_obj(ns, dd)
+        dd.lineno = self.lineno
+
+        # Check for duplicates in the data list.
+        if dd in self.dataList():
+            log.warn(_("A source %s has already been defined.") % dd.src)
+
+        log.info("kickstart downloading %s to %s" % (ns.src, ns.dest))
+        return dd
+
+    def dataList(self):
+        return self.downloadList
+
+    @property
+    def dataClass(self):
+        return self.handler.DownloadData
+
+    def execute(self, ksdata):
+        if not ksdata.download:
+            return
+
+        for dd in ksdata.download.downloadList:
+            if dd.dest.startswith("file:"):
+                dd.dest = dd.dest[len("file:"):]
+
+            if not dd.dest.startswith("/"):
+                msg = _("The dest %s is not on filesystem" % (dd.dest))
+                stderrLog.critical(msg)
+                sys.exit(1)
+
+            dest = conf.target.system_root + dd.dest
+            log.info("downloading %s to %s" % (dd.src, dest))
+            dest_dir = os.path.dirname(dest)
+            if not os.path.exists(dest_dir):
+                os.makedirs(dest_dir)
+
+            try:
+                request = util.requests_session().get(dd.src)
+            except requests.exceptions.RequestException as e:
+                msg = _("The following error was encountered while downloading %s:\n\n%s" % (dd.src, e))
+                stderrLog.critical(msg)
+                sys.exit(1)
+
+            with open(dest, "wb") as dest_f:
+                dest_f.write(request.content)
+
+
 ###
 ### HANDLERS
 ###
@@ -338,6 +436,7 @@ class AnacondaKickstartSpecification(KickstartSpecification):
         "text": COMMANDS.DisplayMode,
         "updates": COMMANDS.Updates,
         "vnc": COMMANDS.Vnc,
+        "download": Download,
     }
 
     commands_data = {
@@ -345,6 +444,7 @@ class AnacondaKickstartSpecification(KickstartSpecification):
         "ModuleData": COMMANDS.ModuleData,
         "RepoData": RepoData,
         "SshPwData": COMMANDS.SshPwData,
+        "DownloadData": DownloadData,
     }
 
     @classmethod
-- 
2.7.4
