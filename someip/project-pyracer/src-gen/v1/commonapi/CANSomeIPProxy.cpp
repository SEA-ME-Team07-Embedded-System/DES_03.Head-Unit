/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/commonapi/CANSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace commonapi {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createCANSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< CANSomeIPProxy>(_address, _connection);
}

void initializeCANSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.CAN:v1_0:can",
        0x1234, 0x5678, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.CAN:v1_0",
        &createCANSomeIPProxy);
}

INITIALIZER(registerCANSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeCANSomeIPProxy);
}

CANSomeIPProxy::CANSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          fdis_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x80f3), CommonAPI::SomeIP::event_id_t(0x80f3), CommonAPI::SomeIP::method_id_t(0xbba), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
          rpm_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x80f4), CommonAPI::SomeIP::event_id_t(0x80f4), CommonAPI::SomeIP::method_id_t(0xbbc), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
          rdis_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x80f5), CommonAPI::SomeIP::event_id_t(0x80f5), CommonAPI::SomeIP::method_id_t(0xbbe), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr))
{
}

CANSomeIPProxy::~CANSomeIPProxy() {
    completed_.set_value();
}

CANSomeIPProxy::FdisAttribute& CANSomeIPProxy::getFdisAttribute() {
    return fdis_;
}
CANSomeIPProxy::RpmAttribute& CANSomeIPProxy::getRpmAttribute() {
    return rpm_;
}
CANSomeIPProxy::RdisAttribute& CANSomeIPProxy::getRdisAttribute() {
    return rdis_;
}


void CANSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> CANSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace commonapi
} // namespace v1
