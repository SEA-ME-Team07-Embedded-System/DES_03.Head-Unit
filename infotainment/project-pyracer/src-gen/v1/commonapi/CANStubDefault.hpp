/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_CAN_STUB_DEFAULT_HPP_
#define V1_COMMONAPI_CAN_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/commonapi/CANStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace commonapi {

/**
 * Provides a default implementation for CANStubRemoteEvent and
 * CANStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT CANStubDefault
    : public virtual CANStub {
public:
    COMMONAPI_EXPORT CANStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(CAN::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT CANStubRemoteEvent* initStubAdapter(const std::shared_ptr< CANStubAdapter> &_adapter) {
        CommonAPI::Stub<CANStubAdapter, CANStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual const uint8_t &getDisAttribute() {
        return disAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getDisAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getDisAttribute();
    }
    COMMONAPI_EXPORT virtual void setDisAttribute(uint8_t _value) {
        const bool valueChanged = trySetDisAttribute(std::move(_value));
        if (valueChanged) {
            fireDisAttributeChanged(disAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const uint8_t &getRpmAttribute() {
        return rpmAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getRpmAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getRpmAttribute();
    }
    COMMONAPI_EXPORT virtual void setRpmAttribute(uint8_t _value) {
        const bool valueChanged = trySetRpmAttribute(std::move(_value));
        if (valueChanged) {
            fireRpmAttributeChanged(rpmAttributeValue_);
        }
    }


protected:
    COMMONAPI_EXPORT virtual bool trySetDisAttribute(uint8_t _value) {
        if (!validateDisAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<CANStubAdapter> stubAdapter = CommonAPI::Stub<CANStubAdapter, CANStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockDisAttribute(true);
            valueChanged = (disAttributeValue_ != _value);
            disAttributeValue_ = std::move(_value);
            stubAdapter->lockDisAttribute(false);
        } else {
            valueChanged = (disAttributeValue_ != _value);
            disAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateDisAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual bool trySetRpmAttribute(uint8_t _value) {
        if (!validateRpmAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<CANStubAdapter> stubAdapter = CommonAPI::Stub<CANStubAdapter, CANStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockRpmAttribute(true);
            valueChanged = (rpmAttributeValue_ != _value);
            rpmAttributeValue_ = std::move(_value);
            stubAdapter->lockRpmAttribute(false);
        } else {
            valueChanged = (rpmAttributeValue_ != _value);
            rpmAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateRpmAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual CANStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(CANStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }


    private:
        CANStubDefault *defaultStub_;
    };
protected:
    CANStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    uint8_t disAttributeValue_ {};
    uint8_t rpmAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace commonapi
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_CAN_STUB_DEFAULT
